#include "mbed.h"
#include <TCPSocket.h>
#include <EthInterface.h>
#include "EthernetInterface.h"
#include "ESP8266Interface.h"
#include "string.h"
#include "hcsr04.h"
#include "FXOS8700Q.h"


int acellFunc();
int ServerFunc(char sendToSocket[]);
void ClearBuffer();
int distanceFunc();

ESP8266Interface wifi(D1, D0);

//D12 TRIGGER D11 ECHO
HCSR04 sensor(D12, D11); 

//I2C lines for FXOS8700Q accelerometer/magnetometer
FXOS8700Q_acc acc( PTE25, PTE24, FXOS8700CQ_SLAVE_ADDR1);
FXOS8700Q_mag mag( PTE25, PTE24, FXOS8700CQ_SLAVE_ADDR1);
 
MotionSensorDataUnits mag_data;
MotionSensorDataUnits acc_data;

float deltaY = 0;
float deltaX = 0;
float deltaZ = 0;

char rbuffer[300];
char data [80];
int rcount;

//define Funtion for RPC
void getdeltaY(char * input,char * output);
void getdeltaX(char * input,char * output);
 
int main()
{
   distanceFunc();
   acellFunc();
}

int acellFunc() 
{
    float faX, faY, faZ;
    float fmX, fmY, fmZ;
    float faX_prev=0,faY_prev=0,faZ_prev=0;
    float deltaY = 0;
    float deltaX = 0;
    float deltaZ = 0;
  
    acc.enable();
    printf("\r\n\nFXOS8700Q Who Am I= %X\r\n", acc.whoAmI());

    while (true) 
    {
        acc.getAxis(acc_data);
        mag.getAxis(mag_data);
        printf("\n\rAcellerometer OK\n\r");
        distanceFunc();
        
        acc.getX(&faX);
        deltaX = abs(faX-faX_prev);// absolute value of delta X 
        
        if(deltaX >=.300)// if the difference is greater thn .3 in positive or negative 
        {
           //needs to be calabrated 
            printf(" \r\ndeltaX=%1.4f\n ",deltaX);
            printf(" \r\nX door open ");
        }
        
        acc.getY(&faY);
        deltaY = abs(faY-faY_prev);
        
        
        if(deltaY >=1)
        {
           //needs to be calabrated
           //printf("\r\nY Door Open \n ",deltaY);
        }
        acc.getZ(&faZ);
        deltaZ = abs(faZ-faZ_prev);
        
        if(deltaZ >=.010)
        {
           
            //would a for loop here be of any use to cycle????
            wait(1);//5 second delay 
            printf("\r\n Acellerometer Activated \r\n");
            distanceFunc();
              
             
             //condition to call ISR for UltraSonic JL
        }
        
        
        wait(1.0);
        //break;
    }
    return 0;
}

    
int ServerFunc(char sendToSocket[]) {
     strcpy(data,sendToSocket);
     
    // printf("\n\rIN SERVERFUNC \nsendToSocket: %s\n\r",data);

    printf("\r\nUser: %s \r\n Size1: %d\r\n", data, sizeof(data));
    
    printf("\r\nConnecting...\n\r");
    int ret = wifi.connect("john","qwerty12", NSAPI_SECURITY_WPA_WPA2);
    //int ret = wifi.connect("UPC928949","BBRLGCOF", NSAPI_SECURITY_WPA_WPA2);
    if (ret != 0) {
        printf("\r\n*** WiFi Connection error ***\r\n");
        return -1;
    }
    printf("IP Address is %s\r\n", wifi.get_ip_address());
           
    //create socket
    TCPSocket sock;
    sock.open(&wifi);
    int ret2 = sock.connect("anywherealarm.hopto.org", 8086);
    //int ret2 = sock.connect("192.168.43.224", 8080);
    if(ret2 != 0)
    {
       printf("*** Socket connection error ***\r\n");
       return -1;
    }
    sock.set_blocking(false);
   
    int scount = sock.send(data, sizeof data);
    strcat(data,"\r"); //******************************************************************************
    
     printf("sent %d [%.*s]\r\n", scount, strstr(data, "\r\n")-data, data);
     ClearBuffer();
     //strcat(data,"\r"); //******************************************************************************  
    //recieve from java server
    while( 1) {//waits for something to be in the buffer  
        int32_t val =sock.recv(rbuffer, sizeof(rbuffer) -1);
        
        if(val >0)
            break;
    }
    printf("recv %d [%.*s]\r\n", rcount, strstr(rbuffer, "\r\n")-rbuffer, rbuffer);
    printf("Done name 1\r\n");
    sock.close();
    wait(2);
      ClearBuffer();
    acellFunc();
    //wifi.disconnect();
    
    return 0;
}

void ClearBuffer(){
    int i;
    for(i = 0; i <= rcount; i++)
        rbuffer[i] = '\0';
        data[i] = '\0';
}

  
int distanceFunc() {   
      
      char location[] = "Station02", state[10];
      char sendToSocket[80];
           
      long distance = sensor.distance();   
      printf("distanza  %d  \r",distance);
      
      if(distance> 6)
      {
        strcpy(state, "Activated");
        strcpy(sendToSocket, location);
        strcat(sendToSocket, " ");
        strcat(sendToSocket,state);
        printf("Alarm Triggered %s", sendToSocket); 
        strcat(sendToSocket,"\r");
        //printf("This 1 %s",sendToSocket);  
        ServerFunc(sendToSocket); 
         
      }
      else if(distance< 6)
      {
        strcpy(state,"Secure");        
        strcpy(sendToSocket, location);
        strcat(sendToSocket, " ");
        strcat(sendToSocket,state);
        printf("Alarm OK %s\n",sendToSocket);
        strcat(sendToSocket,"\r");
        //printf("This 2 %s",sendToSocket); 
        ServerFunc(sendToSocket); 
        
      }
      wait(1.0); // 1 sec 
      return 0;    
}


//*******************
//Socket Server

/**
 * Created by john on 26/04/2017.
 *
 //query for this socket server
 use project;
 CREATE TABLE alarmData (

 location varchar(255),
 state varchar(255)

 );
 */

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public class GreetingServer {
    ServerSocket myServerSocket;
    boolean ServerOn = true;
    public GreetingServer() {
        try {
            myServerSocket = new ServerSocket(8086);
        } catch(IOException ioe) {
            System.out.println("Could not create server socket on port 8080. Quitting.");
            System.exit(-1);
        }

        Calendar now = Calendar.getInstance();
        SimpleDateFormat formatter = new SimpleDateFormat(
                "E yyyy.MM.dd 'at' hh:mm:ss a zzz");
        System.out.println("It is now : " + formatter.format(now.getTime()));

        while(ServerOn) {
            try {
                Socket clientSocket = myServerSocket.accept();
                ClientServiceThread cliThread = new ClientServiceThread(clientSocket);
                cliThread.start();
            } catch(IOException ioe) {
                System.out.println("Exception found on accept. Ignoring. Stack Trace :");
                ioe.printStackTrace();
            }
        }
        try {
            myServerSocket.close();
            System.out.println("Server Stopped");
        } catch(Exception ioe) {
            System.out.println("Error Found stopping server socket");
            System.exit(-1);
        }
    }

    public static void main (String[] args) {
        new GreetingServer();
    }

    public void sendToDB(String location, String state) {
        try {

            System.out.println("IN SEND TO DB");
            String driver = "com.mysql.jdbc.Driver";
            Class.forName(driver);
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "root", "");
            String query = "insert into alarmdata(location,state)" + "values(?,?)";
            PreparedStatement preparedStatement = c.prepareStatement(query);

            preparedStatement.setString(1, location);
            preparedStatement.setString(2, state);
            preparedStatement.execute();
            c.close();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    class ClientServiceThread extends Thread {
        Socket myClientSocket;
        boolean m_bRunThread = true;
        public ClientServiceThread() {
            super();
        }

        ClientServiceThread(Socket s) {
            myClientSocket = s;
        }

        public void run() {
            BufferedReader in = null;
            PrintWriter out = null;
            System.out.println(
                    "Accepted Client Address - " + myClientSocket.getInetAddress().getHostName());
            try {
                in = new BufferedReader(
                        new InputStreamReader(myClientSocket.getInputStream()));
                out = new PrintWriter(
                        new OutputStreamWriter(myClientSocket.getOutputStream()));

                while(m_bRunThread) {
                    String clientCommand = in.readLine();
                    System.out.println("Client Says :" + clientCommand);

                    if(!ServerOn) {
                        System.out.print("Server has already stopped");
                        out.println("Server has already stopped");
                        out.flush();
                        m_bRunThread = false;
                    }
                    if(clientCommand.equalsIgnoreCase("Station01 Activated")) {
                        String alarmtriggered = clientCommand;
                        sendToDB(alarmtriggered, null);
                        System.out.println("Trig: " + alarmtriggered);
                        out.println("Server Says : " + clientCommand);
                        out.flush();
                        m_bRunThread = false;
                        System.out.print("Stopping client thread for client : ");
                    }else if(clientCommand.equalsIgnoreCase("Station01 Secure")) {
                        String alarmOK = clientCommand;
                        sendToDB(alarmOK, null);
                        System.out.println("Trig: "+ alarmOK);
                        out.println("Server Says : " + clientCommand);
                        out.flush();
                        m_bRunThread = false;
                        System.out.print("Stopping client thread for client for Alarm OK Station01 : ");
                    }else if(clientCommand.equalsIgnoreCase("Station02 Activated")) {
                        String alarmOK = clientCommand;
                        sendToDB(alarmOK, null);
                        System.out.println("Trig: "+ alarmOK);
                        out.println("Server Says : " + clientCommand);
                        out.flush();
                        m_bRunThread = false;
                        System.out.print("Stopping client thread for client for Alarm OK Station02 : ");
                    }else if(clientCommand.equalsIgnoreCase("Station02 Secure")) {
                        String alarmOK = clientCommand;
                        sendToDB(alarmOK, null);
                        System.out.println("Trig: "+ alarmOK);
                        out.println("Server Says : " + clientCommand);
                        out.flush();
                        m_bRunThread = false;
                        System.out.print("Stopping client thread for client for Alarm OK Station02 : ");
                    }else if(clientCommand.equalsIgnoreCase("end")) {
                        m_bRunThread = false;
                        System.out.print("Stopping client thread for client : ");
                        ServerOn = false;
                    }
                    else {
                        out.println("Server Says : " + clientCommand);
                        out.flush();
                    }
                }
            } catch(Exception e) {
                e.printStackTrace();
            }
            finally {
                try {
                    in.close();
                    out.close();
                    myClientSocket.close();
                    System.out.println("...Stopped");
                } catch(IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }
}

//*************************
//Web Application

/**
 * Created by john on 22/04/2017.
 use project;
 CREATE TABLE alarmData (

 location varchar(255),
 state varchar(255)

 );
 */
// Java extension packages

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.*;

public class connectToDB extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();//prints to your html doc
        //out.println("hi john in DB class");
        //connect to db
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "root", "");
            stmt = conn.createStatement();
            String orderBy = request.getParameter("sort");
            if ((orderBy == null) || orderBy.equals("")) {
                orderBy = "lastName";
            }
            String orderByDir = request.getParameter("sortdir");
            if ((orderByDir == null) || orderByDir.equals("")) {
                orderByDir = "asc";
            }
            String query = "SELECT * FROM alarmdata";
            ResultSet rs = stmt.executeQuery(query);
            String state = null;
            String location = null;
            while (rs.next()) {

                location = rs.getString("location");
                state = rs.getString("state");
                System.out.println(location + state);
                //loop through
                //print to console or to html

            }

            out.println("<html>");
            out.println("<head><title>Alarm database</title></head>");
            out.println("<body>");
            out.println("AnywhereAlarmSystem Local Machine");
            out.println("<h1 align=\"center\"\n" + ">AnywhereAlarmSystem</h1>");
            out.print("<p1\n\r>" + location + "</p1\n\r>");
            out.print("<p2\n\r>" + state + "</p2\n\r>");
            out.println("</body>");
            out.println("</html>");

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
